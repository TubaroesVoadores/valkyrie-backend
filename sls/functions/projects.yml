CreateProject:
  handler: src/functions/projects/createProject.main
  events:
    - http:
        method: post
        path: projects
        cors: true
        authorizer: aws_iam
  iamRoleStatementsName: ${self:service}-${self:custom.stage}-create-project
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: '*'
    - Effect: Allow
      Action: 
        - lambda:*
    - Effect: Allow
      Action: 
        - s3:*
      Resource: '*'  
  environment:
    CreateImageLambdaName: !Ref CreateImagesLambdaFunction

GetProject:
  handler: src/functions/projects/getProject.main
  events:
    - http:
        method: get
        path: projects/{projectId}
        cors: true
        authorizer: aws_iam
  iamRoleStatementsName: ${self:service}-${self:custom.stage}-get-project
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: '*'

ListProjects:
  handler: src/functions/projects/listProjects.main
  events:
    - http:
        method: get
        path: projects
        cors: true
        authorizer: aws_iam
  iamRoleStatementsName: ${self:service}-${self:custom.stage}-list-projects
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: '*'

EmailForms:
  handler: src/functions/projects/sendEmail.emailForms
  events:
    - http:
        method: post
        path: projects/emailForms
        cors: true
        authorizer: aws_iam
  iamRoleStatementsName: ${self:service}-${self:custom.stage}-email-forms

LandingEmail:
  handler: src/functions/projects/sendEmail.landingEmail
  events:
    - http:
        method: post
        path: projects/landingEmail
        cors: true
  iamRoleStatementsName: ${self:service}-${self:custom.stage}-landing-email

UnifiedStatus:
  handler: src/functions/projects/unifiedStatus.main
  iamRoleStatementsName: ${self:service}-${self:custom.stage}-unifiedStatus
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: '*'
